//  use DSU 
//when two variable are equal just merge them
//after finishing all equality variable find non equal 
// check for their parent if at any time they are unequal return false 
// else return true 

ArrayList<Integer> parent;
        ArrayList<Integer> rank ;

        int find(int x)
        {
            if(parent.get(x) == x)
            return x;

            parent.set(x,find(parent.get(x)));

            return parent.get(x);
        }


        void union(int x,int y)
        {
            int x_parent = find(x);
            int y_parent = find(y);

            if(x_parent == y_parent)
            return ;

            if(rank.get(x_parent) > rank.get(y_parent))
            {
                parent.set(y_parent,x_parent);
            }
            else if(rank.get(x_parent) < rank.get(y_parent))
            {
                parent.set(x_parent,y_parent);
            }
            else
            {
                parent.set(x_parent,y_parent);
                rank.set(y_parent,rank.get(y_parent)+1);
            }
        }




    public boolean equationsPossible(String[] equations) {
        
        parent = new ArrayList<>(26);
        rank = new ArrayList<>(26);

        for(int i = 0;i<26;i++)
        {
            parent.add(i);
            rank.add(0);
        }


        //do union of equal chars
        for(String s: equations)
        {
            if(s.charAt(1) == '=')
            {
                union(s.charAt(0)-'a',s.charAt(3)-'a');
            }
        }

        for(String s: equations)
        {
            if(s.charAt(1) == '!')
            {
                int t = find(s.charAt(0)-'a');
                int p = find(s.charAt(3)-'a');

                if(t==p)
                {
                    return false;
                }
            }
        }



    return true;

    }

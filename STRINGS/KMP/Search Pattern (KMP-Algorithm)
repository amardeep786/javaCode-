Search Pattern (KMP-Algorithm)  :: https://www.geeksforgeeks.org/problems/search-pattern0205/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=practice_card
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// KMP -

/*
    approach simple h KMP ka 
    
     char by char match krwaate jaao 
     
     aur jb bhi naa match ho tbhi poora peechhe nai jaana h 
     bss dekhlo ki pattern m 0 se lekr ek char peeche tkk kitny length ka proper longest prefix hai 
     jo ki suffix k brabr h 
     
     suppsose 3 length k prefix suffix k brabr hai to mtlb hhum 6 length match krwa kar current tkk phoche hai 
     fr s poora 6 match kraane ki jrurat nai h bss 3 length hi peeche jaao kiuki 3 length ka prefix and suffix
     brabr h to first 3 hm match krwa chuke honge string me 
     
     abcabcfk
     abcabcd
     
     mismatch -> f and d to d s pehle c tkk 3 length ka prefix and suffix brabr hai ie abc 
     
     to hum f p hi rhege orr dusre yaani ki pattern me 3 index p chle jaehge ie at index 3 of abcabcd
     we can see ki 
     string : abcabcfk me index 3,4,5 is matching with index 0 ,1,2 to aise chlega kaam apna
     
     to we need hrek position k liy longest proper prefix which is equal to suffix (LPS)

*/

class Solution
{
    
    ArrayList<Integer> search(String pat, String txt)
    {
        int n = txt.length();
        int m = pat.length();
        
        ArrayList<Integer> res = new ArrayList<>();
        
        // pehle LPS calculate krlete hai pattern ka fr KMP likhege 
        
        int LPS[] = new int[m];
        computeLPS(pat , LPS , m);
        
        int i = 0 , j = 0 ;
        
        while(i < n)
        {
            // write KMP 
            if(txt.charAt(i) == pat.charAt(j))
            {
                // agr match h to dono ko aage bdhaado kuj nai krna h 
                i++;
                j++;
            }
            
            if(j == m)
            {
                // agr pattern k end m phoch gye mtlb match mila h to index ko daalo 
                res.add(i-m+1) ;  // 1 based indexing isliy 1 add kia 
                
                // j ko frse ek peeche wale k lps m bhejo qki kuj match part hoga already
                j = LPS[j-1];
            }else if(i < n && txt.charAt(i) != pat.charAt(j))
            {
                // agr char match nai h to j ko peeche bhejo
                if(j != 0)
                {
                    j = LPS[j-1] ;
                }else
                {
                    // agr j 0 hai to kuj nai kr skte i ko aage bdhna pdega 
                    i++ ;
                }
            }
        }
        
        return res ;
        
    }
    
    public void computeLPS(String pat ,int LPS[] , int m)
    {
        int len = 0 ; // length of prev longest prefix == suffix 
        
        LPS[0] = 0 ; // 1 length k liy proper prefix suffix nai milega 
        
        int i = 1 ;
        while(i < m)
        {
            // say len = 2 hai mtlb pichhle char k liy 2 len ka prefix and siffix equal mila 
            // kindOf aaaa ab hum 5th char k liy dekhna chahte h to isko kis char s match klrana chaehege
            // ie len p jo h hme malom h ki  2 len ka equal h to 3rd char ie index at len wale ko curr
            // char s match krana chah rhe hain 
            
            if(pat.charAt(i) == pat.charAt(len))
            {
                len++;
                LPS[i] = len ;
                i++ ;
            }else
            {
                // ager nai hua match to length ko ek ghta k match krana chahege ki kya ek kam len ka 
            // prefixx suffix mila k nai 
            
                if(len != 0)
                {
                    len = LPS[len - 1]; // ek length kam p kitne ki matching hui thi to kya utni abhi frse hogi 
                }else
                {
                    // agr 0 length tkk bna imila mtlb LPS hi 0 hai or i ko aage bdhado 
                    LPS[i] = 0 ;
                    i++;
                }
            }
        }
    }
}
 

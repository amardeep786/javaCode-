3036. Number of Subarrays That Match a Pattern II :: https://leetcode.com/problems/number-of-subarrays-that-match-a-pattern-ii/description/
----------------------------------------------------------------------------------------------------------------------------------------------
// kmp algo s hojaega O(m+n) me

class Solution {
    public int countMatchingSubarrays(int[] nums, int[] pattern) {
        
        // nums array ko pattern ki tra bnaa pehle ie j bhi element jo rule hold krra h wahi likhdo
        int n = nums.length;
        int[] txt = new int[n-1];
        int idx = 0;
        for(int i = 0;i<n-1;i++)
        {
            if(nums[i] < nums[i+1])
            {
                txt[idx++] = 1;
            }else if(nums[i] == nums[i+1])
            {
                txt[idx++] = 0;
            }else
            {
                txt[idx++] = -1;
            }
        }

        // ab txt bhi [1,0,-1,-1 ] kuj iss tra ka bn gya or pattern bhi aisa hi tha bs ab count dekhna h patern aka txt me

        return KMP(txt,pattern);
    }

    private int KMP(int[] txt , int[] pattern)
    {
        int n = txt.length;
        int m  = pattern.length;
        int count = 0;
        int LPS[] = new int[m];
        computeLPS(pattern,LPS);

        int i = 0 , j = 0;

        while(i<n)
        {
            if(txt[i] == pattern[j])
            {
                i++;
                j++;
            }

            if(j==m)
            {
                // match found
                count++ ;

                j = LPS[j-1];
            }else if(i < txt.length && pattern[j] != txt[i])
            {
                if(j != 0)
                {
                    j = LPS[j-1];
                }else
                {
                    i++;    // no option do i++
                }
            }
        }

        return count;
    }
    private void computeLPS(int[]pattern,int[]LPS)
    {
        int len = 0 ; // check for 0 length
        LPS[0] = 0 ;
        int m = pattern.length;
        int i = 1;

        while(i<m)
        {
            if(pattern[i] == pattern[len])
            {
                len++;
                LPS[i] = len ;
                i++;
            }else
            {
                if(len != 0)
                {
                    len = LPS[len-1];
                }else
                {
                    LPS[i] = 0;
                    i++;
                }
            }
        }
    }
}

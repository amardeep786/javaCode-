392. Is Subsequence :: https://leetcode.com/problems/is-subsequence/description/
---------------------------------------------------------------------------------------------------------------------
// simple use 2 pointer to traverse both string

/*
class Solution {
    public boolean isSubsequence(String s, String t) {
        
        int i = 0,j=0,n = t.length(),m=s.length();

        if(m > n)
        return false;

        while(i<n && j < m)
        {
            char ch  = s.charAt(j);
            boolean found = false;
            while(i<n && t.charAt(i) != ch)
            {                
                i++;
            }

            if(i!= n)
            {
                // mtlb ith p ch mil gya 
                i++;
                j++;
            }
            else
            {
                return false;
            }
        }
        // pehle hi i khtm hogya or j nahi hua to bhi false
        if(j != m)
        return false;

        return true;
    }
}

*/

// ----------- follow up --------work for many strings ----------------------------------------------------------------------------------------------//

// now we have multiple string and we want to check whether they are subsequence of t or not 
// so put t in map and iterate over strings 

class Solution {
    public boolean isSubsequence(String s, String t) {

        Map<Character,List<Integer>> map = new HashMap<>();
        int prev = -1;
        for(int i = 0;i<t.length() ;i++)
        {
            char ch = t.charAt(i);
            map.computeIfAbsent(ch,k->new ArrayList<>()).add(i);
        }

        // ab hme s p traverse krte hue bss dekhna h ki t mai hai ya nai aya kaha h
        for(int i = 0;i<s.length();i++)
        {
            char ch = s.charAt(i);

            if(!map.containsKey(ch))
            return false;

            // if exist to hme jo list of indices hain usme s curr index s greater dhundna h 
            int index = binarySearch(map.get(ch),prev);

            if(index == map.get(ch).size())
            return false;



            prev = map.get(ch).get(index);
        }

        return true; //a gr kbhi false nai hua to true return krdo 
    }

    public int binarySearch(List<Integer> list , int target)
    {
        int ans = -1;
        int l = 0 , r = list.size()-1;

        while(l<=r)
        {
            int mid = l + (r-l)/2;

            if(list.get(mid) <= target)
            {
                
                l = mid+1;
            }else
            {
                ans = mid;
                r = mid - 1;
            }
        }

        return ans == -1 ? list.size():ans ;
    }
}

12. Integer to Roman : https://leetcode.com/problems/integer-to-roman/description/

**********************************************************************************************************************

class Solution {
    public String intToRoman(int num) {
        
       int val[] = {1000,900,500,400,100,90,50,40,10,9,5,4,1};
       String represent[] = {"M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"};

        StringBuilder res = new StringBuilder();
        for(int i = 0;i<13;i++)
        {
            int times = 0;
            
            if(num == 0)
            break ;
            
                    if(num >= val[i])
                {
                    times = num/val[i];
                    num = num%val[i];

                    while(times != 0)
                    {
                        res.append(represent[i]);
                        times--;
                    }
                }
            
            
        }

        return res.toString();

***********USING MAP*********************************************************************************************************

    // Map<Integer,String> map = new TreeMap<>(Comparator.reverseOrder());

    //     map.put(1000,"M");
    //     map.put(900,"CM");
    //     map.put(500,"D");
    //     map.put(400,"CD");
    //     map.put(100,"C");
    //     map.put(90,"XC");
    //     map.put(50,"L");
    //     map.put(40,"XL");
    //     map.put(10,"X");
    //     map.put(9,"IX");
    //     map.put(5,"V");
    //     map.put(4,"IV");
    //     map.put(1,"I");

    //     StringBuilder res = new StringBuilder();
    //     for(Map.Entry<Integer,String> entry : map.entrySet())
    //     {
    //         int times = 0;
    //         int curr = entry.getKey();     // current value s comparison
    //         String currS = entry.getValue();   // agar append krege to iss cuurent string ko 
    //         if(num == 0)
    //         break ;
            
    //             if(num >= curr)
    //             {   times = num/curr;
    //                 num = num%curr;
    //                 while(times != 0)
    //                 {
    //                     res.append(currS);
    //                     times--;
    //                 }
    //             }
            
            
    //     }

    //     return res.toString();
    }
}

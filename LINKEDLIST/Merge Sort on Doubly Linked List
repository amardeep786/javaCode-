Merge Sort on Doubly Linked List :: https://www.geeksforgeeks.org/problems/merge-sort-on-doubly-linked-list/1

********************************************************************************************************************************************

class Solution {
    // Function to sort the given doubly linked list using Merge Sort.
    static Node sortDoubly(Node h1) {
        
        // pehle divide krlo then merge
        
        if(h1==null || h1.next == null)
        {
            return h1 ;
        }
        
        Node h2 = divide(h1);  // ye middle s divide krta rhega recursively to base case upe lga dia
        
        // ab recursively call krdo dono half pe
        
        h1 = sortDoubly(h1);
        h2 = sortDoubly(h2);
        
        return merge(h1,h2);   // normal merge sort template
    }
    
    private static Node divide(Node temp)
    {
        Node slow = temp;
        Node fast = temp;
        
        while(fast.next != null && fast.next.next != null)
        {
            fast = fast.next.next;
            slow = slow.next ;
        }
        Node ans = slow.next;
        slow.next = null ;
        return ans ;
    }
    
    public static Node merge(Node h1 , Node h2)
    {
        Node dummy = new Node(-1);
        Node curr = dummy;
        
        while(h1!= null && h2!= null)
        {
            if(h1.data < h2.data)
            {
                curr.next = h1;
                h1.prev = curr;
                h1 = h1.next;
            }else
            {
                curr.next = h2;
                h2.prev = curr;
                h2 = h2.next;
            }
            
            curr = curr.next ;
        }
        
        while(h1!=null)
        {
            curr.next = h1;
            h1.prev = curr;
            h1 = h1.next;
            curr = curr.next;
        }
        
        while(h2!=null)
        {
            curr.next = h2;
            h2.prev = curr;
            h2 = h2.next;
            curr = curr.next;
        }
        
        Node ans = dummy.next;
        ans.prev = null ;
        
        return ans;
    }
}

79. Word Search : https://leetcode.com/problems/word-search/description/  

*******************************************************************************************************************************

class Solution {
    int direction[][] = {{0,1},{0,-1}, {1,0},{-1,0}} ;
    public boolean exist(char[][] board, String word) {
        int n = board.length;
        int m  = board[0].length;
        for(int i = 0;i<n;i++)
        {
            for(int j = 0;j<m;j++)
            {
                if(board[i][j] == word.charAt(0))
                {
                   if( check(board , i , j ,0, word) == true)  // 0 is for index jo ki base case btaega
                   {
                        return true;
                   }
                }
            }
        }

        return false ;

    }

    public boolean check(char[][] board , int row,int col,int index,String word)
    {
        if(index == word.length())
        {
            return true ;   //mtlb hum match kraate kraate end tkk phoch gye
        }

        if(row < 0 || row >= board.length || col < 0 || col>= board[0].length || board[row][col] == '$')
        {
            return false;
        }

        if(board[row][col] != word.charAt(index))
        return false;


        char temp = board[row][col];

        board[row][col] = '$';

        for(var dir : direction)
        {
            int new_Row = row + dir[0];
            int new_Col = col + dir[1];

            if(check(board,new_Row,new_Col,index+1,word) == true)
            return true;
        }

        //agr new diection s true aaya to true return krdia else false krdia with restore purana
        board[row][col] = temp;
        return false;

    }
}

863. All Nodes Distance K in Binary Tree :: https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/
---------------------------------------------------------------------------------------------------------------------------------------------------
/*
hum kisi node s usk parent p nai jaa paa rhe to bss hum map m hrek node ka parent store kr lenege
then target s BFS maardo 

visited rkhna ki ki=oi baar baar na chla jaae
*/
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        
        Map<TreeNode,TreeNode> parent = new HashMap<>();

        fillMap(root,parent); // all parents stored

        //  target given hai  BFS krdo

        List<Integer> res = new ArrayList<>();

        bfs(target,k,res,parent);

        return res;
       
    }

    public void bfs(TreeNode target,int k , List<Integer> res,Map<TreeNode,TreeNode> map)
    {
        Queue<TreeNode>que = new LinkedList<>();
        que.offer(target);
        Set<Integer> set = new HashSet<>();
        set.add(target.val);

        int level = 0;
        boolean flag = false;
        while(!que.isEmpty())
        {
            int n = que.size();

            while(n-- != 0)
            {
                TreeNode temp = que.poll();
                if(level == k)
                {
                    res.add(temp.val);
                }
        
                // left
                if(temp.left != null && !set.contains(temp.left.val))
                {que.offer(temp.left);
                set.add(temp.left.val);}

                // right
                if(temp.right != null && !set.contains(temp.right.val))
                {que.offer(temp.right);
                set.add(temp.right.val);}

                //parent
                if(map.get(temp) != null && !set.contains(map.get(temp).val))
                {
                    que.offer(map.get(temp));
                    set.add(map.get(temp).val);
                }
            }
            level++;
        }
    }

    public void fillMap(TreeNode root,Map<TreeNode,TreeNode> parent)
    {
        if(root == null) return ;

        if(root.left != null)
        {
            parent.put(root.left,root);
        }
        fillMap(root.left,parent);

        if(root.right != null)
        {
            parent.put(root.right,root);
        }
        fillMap(root.right,parent);
    }
}

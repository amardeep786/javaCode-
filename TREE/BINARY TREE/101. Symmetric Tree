101. Symmetric Tree :: https://leetcode.com/problems/symmetric-tree/description/
-----------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------- using BFS ------------------------------------------------------------------------------------


// class Solution {
//     public boolean isSymmetric(TreeNode root) {

//         Queue<TreeNode> queue = new LinkedList<>();
//         queue.add(root.left);
//         queue.add(root.right);

//         while(!queue.isEmpty())
//         {
//             TreeNode left = queue.poll();
//             TreeNode right = queue.poll();

//              if(left == null && right == null)
//              continue;

//              if(left == null || right == null)  // dono null nai h koi ek null hai to false
//              return false;

//              if(left.val != right.val)  
//              return false;

//              queue.add(left.left);
//              queue.add(right.right);
//              queue.add(left.right);
//              queue.add(right.left);

//         }
//         return true;
        
//     }
// }

// ----------------------- using DFS ------------------------------------------------------------------------------------


class Solution {
    public  boolean isSymmetric(TreeNode root)
    {
        if(root == null)return true;
        return help(root.left,root.right); 
    }
    public static boolean help(TreeNode left , TreeNode right)
    {
        if(left == null && right == null)
        return true ;  // qki leftmost ko rightmost s compare kna h to is case m dono equal
        
        // koi ek null hua and dusra not null to false
        if(left == null || right == null)
        return false;
        
        // pehle to left and right ki calue same honi chahiye and then 
        
        // left k left ko right k right s compare krna h and then left k right ko right k left s for mirror
        if(left.val == right.val && help(left.left ,right.right) && help(left.right, right.left))
        {
            return true;
        }
        
        return false;
    }
}

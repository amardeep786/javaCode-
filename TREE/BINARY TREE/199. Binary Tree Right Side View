199. Binary Tree Right Side View :: https://leetcode.com/problems/binary-tree-right-side-view/

****************************************************************************************************************************************************

// class Solution {
//     public List<Integer> rightSideView(TreeNode root) {

//          List<Integer> result = new ArrayList<>();

//         if(root == null)
//         {
//             return result;
//         }

//         Queue<TreeNode> queue = new LinkedList<>();
        
//         queue.offer(root);

//         while(!queue.isEmpty()){

//         int levelSize = queue.size();
//         List<Integer> currentLevel = new ArrayList<>();   // storing every level


//         for(int i = 0;i<levelSize;i++)
//         {
//             TreeNode currentNode = queue.poll();

//             currentLevel.add(currentNode.val);

//             if(currentNode.left != null)
//             {
//                 queue.offer(currentNode.left);
//             }

//             if(currentNode.right != null)
//             {
//                 queue.offer(currentNode.right);
//             }
//         }

        

//         result.add(currentLevel.get(currentLevel.size()-1));  // adding every right node to ans


//     }
//         return result;
        
//     }
        
//     }

// /*************** WITHOUT STORING EVEY LEVEL****************USING BFS********************************************************************************* */
// class Solution {
//     public List<Integer> rightSideView(TreeNode root) {

//         List<Integer> result = new ArrayList<>();

//         if(root == null)
//         {
//             return result;
//         }

//         Queue<TreeNode> queue = new LinkedList<>();
        
//         queue.offer(root);

//         while(!queue.isEmpty()){

//         int levelSize = queue.size();
        
//         TreeNode currentNode = null ;

//         for(int i = 0;i<levelSize;i++)
//         {
//             currentNode = queue.poll();

//             if(currentNode.left != null)
//             {
//                 queue.offer(currentNode.left);
//             }

//             if(currentNode.right != null)
//             {
//                 queue.offer(currentNode.right);
//             }
//         }   

//         result.add(currentNode.val);  // adding every current node as it store right node only
//     }
//         return result;
        
//     }
        
// }


/*************** WITHOUT STORING EVEY LEVEL****************USING DFS********************************************************************************* */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {

        List<Integer> result = new ArrayList<>();

        preOrder(root,1,result);
       
        return result;
        
    }

    public void preOrder(TreeNode root,int level ,List<Integer> result)
        {
            if(root == null)
            return ;

            if(result.size() < level)   // since jitne level hain utna hi result ka size hona chahiye agar jiss level p utna size nai h resula ka
            {                           //  result me current node ka val daal do qki hum right ko pehle call kr rhe h to definitely right hoga pehle
                result.add(root.val);
            }

            preOrder(root.right,level+1,result);     // pehle right ko daalege then left ko
            preOrder(root.left,level+1,result);
        }
}

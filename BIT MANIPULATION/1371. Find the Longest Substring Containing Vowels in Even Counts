1371. Find the Longest Substring Containing Vowels in Even Counts :: https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/
====================================================================================================================================================================

// ------------------------- method 1 -------------------------------------------------------------------------//

/*
class Solution {
    public int findTheLongestSubstring(String s) {
        int n = s.length();

        // Initialize an array to track the count of each vowel
        int[] vowelCount = new int[5]; // Count of 'a', 'e', 'i', 'o', 'u'

        Map<String,Integer>map = new HashMap<>();

        // jis position p 1 hai waha odd time vowel dikha else even
        String currState = "00000";

        map.put(currState,-1);
        int maxLength = 0;
        for(int i = 0;i<n;i++)
        {
            char ch = s.charAt(i);

            if(ch == 'a')
            {
                vowelCount[0] = (vowelCount[0] + 1)%2;

            }else if(ch =='e')
            {
                vowelCount[1] = (vowelCount[1] + 1)%2;
            }else if(ch =='i')
            {
                vowelCount[2] = (vowelCount[2] + 1)%2;
            }else if(ch =='o')
            {
                vowelCount[3] = (vowelCount[3] + 1)%2;   
            }else if(ch =='u')
            {
                vowelCount[4] = (vowelCount[4] + 1)%2;
            }

            currState = "";
            for(int j = 0;j<=4;j++)
            {
                currState += vowelCount[j];
            }

            // agr koi state frse aaya mtlb even vowel honge tbhi frse invert hokr same state bn gya hoga 
            if(map.containsKey(currState))
            {
                maxLength = Math.max(maxLength, i - map.get(currState));
            }else
            {
                map.put(currState,i);
            }
        }

        return maxLength;
    }
    
}
*/
// ------------------------- method 2 -------------improved--using XOR----------------------------------------------------------//

// upr wale m  array rkh k ussey string bna rhe the pr hum seedha 1 s xor kren toh ya to 0 ya to 1 aaega 
// 1 mtlb odd and 0 means even baaki logic same rkhege 

/*
class Solution {
    public int findTheLongestSubstring(String s) {
        int n = s.length();

        Map<String,Integer>map = new HashMap<>();

        // Initialize an array to track the count of each vowel
        int[] vowelCount = new int[5]; // Count of 'a', 'e', 'i', 'o', 'u'


        // jis position p 1 hai waha odd time vowel dikha else even
        String currState = "00000";

        map.put(currState,-1);
        int maxLength = 0;
        for(int i = 0;i<n;i++)
        {
            char ch = s.charAt(i);

            if(ch == 'a')
            {
                vowelCount[0] = vowelCount[0] ^1;

            }else if(ch =='e')
            {
               vowelCount[1] = vowelCount[1] ^1;
            }else if(ch =='i')
            {
               vowelCount[2] = vowelCount[2] ^1;
            }else if(ch =='o')
            {
                vowelCount[3] = vowelCount[3] ^1;
            }else if(ch =='u')
            {
               vowelCount[4] = vowelCount[4] ^1;
            }

            currState = "";
            for(int j = 0;j<=4;j++)
            {
                currState += vowelCount[j];
            }

            // agr koi state frse aaya mtlb even vowel honge tbhi frse invert hokr same state bn gya hoga 
            if(map.containsKey(currState))
            {
                maxLength = Math.max(maxLength, i - map.get(currState));
            }else
            {
                map.put(currState,i);
            }
        }

        return maxLength;
    }
}
*/
// ------------------------- method 3 -------------improved--using mask----------------------------------------------------------//
class Solution {
    public int findTheLongestSubstring(String s) {
        int n = s.length();

        Map<Integer,Integer>map = new HashMap<>();

       int mask = 0 ; 

        map.put(mask,-1);
        int maxLength = 0;
        for(int i = 0;i<n;i++)
        {
            char ch = s.charAt(i);

            if(ch == 'a')
            {
                mask = mask ^ (1<<0);

            }else if(ch =='e')
            {
                mask = mask ^ (1<<1);
            }else if(ch =='i')
            {
                mask = mask ^ (1<<2);
            }else if(ch =='o')
            {
                 mask = mask ^ (1<<3);
            }else if(ch =='u')
            {
               mask = mask ^ (1<<4);
            }

            // agr koi state frse aaya mtlb even vowel honge tbhi frse invert hokr same state bn gya hoga 
            if(map.containsKey(mask))
            {
                maxLength = Math.max(maxLength, i - map.get(mask));
            }else
            {
                map.put(mask,i);
            }
        }

        return maxLength;
    }
}

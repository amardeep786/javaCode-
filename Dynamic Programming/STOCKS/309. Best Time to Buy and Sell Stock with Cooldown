309. Best Time to Buy and Sell Stock with Cooldown :: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/
-----------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------recursion ----------------------------------------------------------------------//

/*
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;

        return solve(prices,0,n,true) ;  // 0-> day 0 , true -> initially we have to buy so we can buy
    }

    public int solve(int[] prices,int day,int n,boolean buy)
    {
        if(day >= n)
        return 0;  // coz no profit further

        int profit = 0;

        if(buy)  // true means we have to buy
        {
            // 2 option whether we can buy on that day or not
            
            // agr buy krte hai to solve hme sell krk dega qki buy false krdia to sell - prices of buy = profit
            int buyProfit = solve(prices,day+1,n,false) - prices[day] ;  

            // agar uss din buy nai krege to kisi or din krege to can buy wala true hi rhega
            int notBuy = solve(prices,day+1,n,true) ;  

            profit = Math.max(buyProfit,notBuy);
        }else
        {
            // mtlb hum buy nai krskte to sell ki category m aagye -> 2 option either sell or not sell

            // profit us din ka pesa + aage khreed ka true krdia to waha s jo aaya and day + 2 kia kuki agle din nai khreedega 
            int sellProfit = prices[day] + solve(prices,day+2,n,true); 

            //agr us din nai becha to agle din becehgea
            int notSell = solve(prices,day+1,n,false);  

            profit = Math.max(sellProfit,notSell);

        }

        return profit;
    }
}

*/
//------------------------------------memoization ----------------------------------------------------------------------//

/*
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][] = new int[n+1][2] ; //  2 for true ya false ir khredega ya bechega so 0-> false , 1->true

        for(var t : dp) Arrays.fill(t,-1);
        return solve(prices,0,n,true,dp) ;  // 0-> day 0 , true -> initially we have to buy so we can buy
    }

    public int solve(int[] prices,int day,int n,boolean buy,int dp[][])
    {
        if(day >= n)
        return 0;  // coz no profit further

        if(dp[day][buy==true?1:0] != -1)
        return dp[day][buy==true?1:0];

        int profit = 0;

        if(buy)  // true means we have to buy
        {
            // 2 option whether we can buy on that day or not
            
            // agr buy krte hai to solve hme sell krk dega qki buy false krdia to sell - prices of buy = profit
            int buyProfit = solve(prices,day+1,n,false,dp) - prices[day] ;  

            // agar uss din buy nai krege to kisi or din krege to can buy wala true hi rhega
            int notBuy = solve(prices,day+1,n,true,dp) ;  

            profit = Math.max(buyProfit,notBuy);
        }else
        {
            // mtlb hum buy nai krskte to sell ki category m aagye -> 2 option either sell or not sell

            // profit us din ka pesa + aage khreed ka true krdia to waha s jo aaya and day + 2 kia kuki agle din nai khreedega 
            int sellProfit = prices[day] + solve(prices,day+2,n,true,dp); 

            //agr us din nai becha to agle din becehgea
            int notSell = solve(prices,day+1,n,false,dp);  

            profit = Math.max(sellProfit,notSell);

        }

        return dp[day][buy==true?1:0]=profit;
    }
}

*/

//------------------------------------BOTTOM UP ----------------------------------------------------------------------//
class Solution {
    public int maxProfit(int[] prices) {
        int n  = prices.length;

        if(n==0 || n==1) // ek din hai to koi profit nai 
        return 0;

        /*
            assume ki ith day sell kia toh hum j to i-1 loop lga k consider krte jaege ki is din khreeda to kya profit 
            ie hrek din ko buy day maan kr profit nikaalege BUT ye to sirf 1 buy sell ka profit aaya 
            to hme pichle profit ko b add krna hoga to agr jth day buy mana to j-1 day toh cooldown tha to mtlb
            j-2 th ka profit b add kr dege
        */

        int profit[] = new int[n]; // profit[i] -> profit till ith day

        profit[0] = 0 ; // 0th day tkk 0 profit and 

        profit[1] = Math.max(prices[1]-prices[0],0) ; // agr 0th day buy krk 1st day sell krne p ghata hai toh 0 lege profit 

        for(int i = 2;i<n;i++)  // consiering sell days
        {
            profit[i] = profit[i-1];  // profit i ko abhi uske pichle jitna profit maan lete hain agr bdhega to bdha denge aage
            for(int j = 0;j<=i-1;j++)
            {
                int todayProfit = prices[i] - prices[j];

                int prevProfit = j>=2?profit[j-2]:0 ;

                profit[i] = Math.max(todayProfit + prevProfit , profit[i]);
            }
        }
        return profit[n-1];
    }
}

931. Minimum Falling Path Sum :: https://leetcode.com/problems/minimum-falling-path-sum/
____________________________________________________________________________________________________________________________________________________


//----------------------------------------------    method 1 RECURSION + MEMOIZATION ---------------------------------------------------------------------------------------------------------------------//


class Solution {

    public int minFallingPathSum(int[][] matrix) {

         int n = matrix.length;

        int output[][] = new int[n][n];

        for(int[] row : output)
        {
            Arrays.fill(row,Integer.MIN_VALUE);
        }

        int ans = 2111111111;

        for(int j = 0 ; j < n;j++)
        {
           int returnAns =  func(matrix,n-1,j,output) ;
           ans = Math.min(ans,returnAns);
        }
        return ans;
    }

    public int func(int[][] matrix,int row,int col, int output[][] )
    {

        if(col < 0 || col >= matrix.length || row < 0)
        return 2111111111;

        if(row == 0)
        {
            if(col >= 0 && col<matrix[0].length)
            return matrix[row][col];
            else return 0;

        }
        

        if(output[row][col] != Integer.MIN_VALUE)
        return output[row][col];

        

        int left = matrix[row][col] + func(matrix,row-1,col-1,output);
        int up = matrix[row][col] + func(matrix,row-1,col,output);
        int right = matrix[row][col] + func(matrix,row-1,col+1,output);

        return output[row][col] = Math.min(left,Math.min(up,right));
       
     }
}

 //----------------------------------------------    method 2    ------- BOTTOM UP  ---------------------------------------------------------------------------------------------------------------------//


class Solution {

   
    public int minFallingPathSum(int[][] matrix) {

        int n = matrix.length ;
        int dp[][] = new int[n][n];

        for(int i = 0 ; i < n;i++)
        {
            dp[0][i] = matrix[0][i];
        }

        for(int i = 1 ; i < n ;i++)
        {
            for(int j = 0 ; j < n ;j++)
            {

                
                int left = matrix[i][j];

                 if(j>0)
                 left+=dp[i-1][j-1];
                 else
                 left+= 2111111111;

                int up = matrix[i][j] + dp[i-1][j];

                
                int right = matrix[i][j] ;

                if(j<n-1)
                right+= dp[i-1][j+1];
                else
                 right+= 2111111111;

                dp[i][j] =  Math.min(left,Math.min(up,right));
            }
        }

        int ans = 2111111111;

        for(int i = 0 ; i < n;i++)
        {
            ans = Math.min(ans,dp[n-1][i]);
        }

        return ans;

        
    }
}





 //----------------------------------------------    method 3    -------space optimized---------------------------------------------------------------------------------------------------------------------//



class Solution {
  
    public int minFallingPathSum(int[][] matrix) {

       
        int n = matrix.length ;

         int dp[][] = new int[n][n];

            int [] prev = new int[n];
            int [] curr = new int[n];

        for(int i = 0 ; i < n;i++)
        {
           prev[i] = matrix[0][i];
        }

        for(int i = 1 ; i < n ;i++)
        {
            for(int j = 0 ; j < n ;j++)
            {

                
                int left = matrix[i][j];

                 if(j>0)
                 left+=prev[j-1];
                 else
                 left+= 2111111111;

                int up = matrix[i][j] + prev[j];

                
                int right = matrix[i][j] ;

                if(j<n-1)
                right+= prev[j+1];
                else
                 right+= 2111111111;

                curr[j] =  Math.min(left,Math.min(up,right));
            }

            prev = curr;
        }

        int ans = 2111111111;

        for(int i = 0 ; i < n;i++)
        {
            ans = Math.min(ans,prev[i]);
        }

        return ans;

    }
}

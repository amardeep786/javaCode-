70. Climbing Stairs  :: https://leetcode.com/problems/climbing-stairs/
========================================================================================
// class Solution {
//     public int climbStairs(int n) {

//         int outp[] = new int[n+1];

//         Arrays.fill(outp,-1);

//         return help(n,outp);
        
//     }

//     public int help(int n,int[] outp)
//     {
//         if(n==0 || n ==1)
//         return outp[n]=1;

//         if(n<0) return 0;

//         if(outp[n] != -1) return outp[n];  

//         return outp[n]=help(n-1,outp) + help(n-2,outp);

//     }
// }


// // =================================== bottom up =================================================================================//
// class Solution {
//     public int climbStairs(int n) {

//         int dp[] = new int[n+1];  // dp[i] -> steps needed to reach ith stair from 0th stair

//         dp[0] = 1 ;
//         dp[1] = 1 ;

//         for(int i = 2;i<=n;i++)
//         {
//             dp[i] = dp[i-1]+dp[i-2];
//         }

//         return dp[n];
//     }
// }


// =================================== bottom up ======space otimization===========================================================================//

// sirf pichhle 2 states ki value ho to h chahiye
class Solution {
    public int climbStairs(int n) {

        int prev1 = 1 ;
        int prev2 = 1 ;

        int curr = 1 ;

        for(int i = 2;i<=n;i++)
        {
            curr = prev1 + prev2 ;

            prev2 = prev1 ;
            prev1 = curr ;
        }

        return curr;
    }
}

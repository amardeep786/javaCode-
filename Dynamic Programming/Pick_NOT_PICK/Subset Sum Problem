Subset Sum Problem :: https://www.geeksforgeeks.org/problems/subset-sum-problem-1611555638/1
_________________________________________________________________________________________________________________________________________________________



//=============== recursion + memo ==========TC : N* target====================================================//
/*
class Solution{

     Boolean isSubsetSum(int N, int arr[], int sum){
        int dp[][] = new int[sum+1][N+1] ;  // max value sum tkk hi jaegi agr ghta k kr rhe 
                                            // hain tohh
        for(var t : dp)
        {
            Arrays.fill(t,-1);
        }
        return help(N,arr,sum,0,dp);
        
    }
    
    private boolean help(int n, int arr[], int sum , int idx,int dp[][])
    {
        
        if(sum == 0)
        return true ;
        
        if(idx == n)
        {
            return sum == 0;
        }
        
        if(dp[sum][idx] != -1)
        return dp[sum][idx] == 1 ;
        
        // not pick
        
        boolean notPick = help(n,arr,sum,idx+1,dp);
        
        boolean pick = false;
        
        // pick only if curent element is less than target/sum
        if(arr[idx] <= sum)
        {
            pick = help(n,arr,sum-arr[idx],idx+1,dp);
        }
        
        dp[sum][idx] = pick|notPick == true ? 1 : 0 ;
        
        return pick|notPick ;
    }
}

*/

//=============== BOTTOM UP ==============================================================//

class Solution{

     Boolean isSubsetSum(int N, int arr[], int sum){
        boolean dp[][] = new boolean[sum+1][N+1] ;  // max value sum tkk hi jaegi agr ghta k kr rhe 
                                                    // hain tohh
        
        for(int i = 0;i<=N;i++)
        {
            dp[0][i] = true ;  // sum 0 is always possible 
        }
        
        // if array is empty and target is not 0 then we never take any subset so false
        for(int i = 1;i<=sum;i++)
        {
            dp[i][0] = false ;
        }
        
        
        for(int i = 1;i<=sum;i++)
        {
            for(int j = 1;j<=N;j++)
            {
                // not pick so we are checking that sum i can be formned without poicking 
                // jth element to jesa hoga wesa aajaega 
                  dp[i][j] = dp[i][j-1] ; 
                  
                  
                 // ab agr sum >= jth element hai to ye element ko include kr skte hain
                 // jth element means j-1 index ka element
                 if(i >= arr[j-1])
                 {
                     dp[i][j] = dp[i][j] || dp[i-arr[j-1]][j-1];
                 }
            }
        }
        
        return dp[sum][N];
    }
}

552. Student Attendance Record II :: https://leetcode.com/problems/student-attendance-record-ii/description/
--------------------------------------------------------------------------------------------------------------------------------------------------

//----------------------- -------------------------- recursion ---------------------------------------------------------
/*
class Solution {
    
    public int checkRecord(int n) {

        return help(n,0,0);
    }

    public int help( int n,int countA,int countL)
    {
        if(countA >=2 || countL >=3)
        {
            return 0;
        }
        if(n==0)
        return 1;

        int absent = help(n-1,countA+1,countL);
        int late = help(n-1,countA,countL+1);
        int present = help(n-1,countA,countL);

        return absent+late+present;
    }
}

*/
//------------------------------------------------- memoization ---------------------------------------------------------
/*
class Solution {
    int M = 1000000007;
    public int checkRecord(int n) {
        int dp[][][] = new int[n+1][2][3] ;  // 2 -> max 1 absent allowed , 3 -> max 2 consecutive late allowed
        for(var t : dp)
        {
            for(var k : t)
            {
                Arrays.fill(k,-1);
            }
        }
        return help(n,0,0,dp);
    }

    public int help( int n,int countA,int countL,int dp[][][])
    {
        if(countA >=2 || countL >=3)
        {
           // dp[n][countA][countL]=0;
            return 0;
        }
        if(n==0)
        return dp[n][countA][countL]=1;

        if(dp[n][countA][countL] != -1)
        return dp[n][countA][countL];

        int absent = help(n-1,countA+1,0,dp)%M;     // late consective wala 0 hojaega 
        int late = help(n-1,countA,countL+1,dp)%M;
        int present = help(n-1,countA,0,dp)%M; // late consective wala 0 hojaega 

        return dp[n][countA][countL] = ((absent+late)%M+present)%M;
    }
}

*/

// ------------------------------- bottom up -----------------------------------------------------------------------------------

//Approach-2 (Using Bottom Up - Xerox of Recursion from Approach-1)
//T.C : O(n)
//S.C : O(n)
class Solution {
    public int checkRecord(int n) {
        int M = 1000000007;
        int[][][] t = new int[100001][2][3];

        // Base Case - 0 number of days. So, t[0][A][L], we return 1
        for (int A = 0; A <= 1; ++A) {
            for (int L = 0; L <= 2; ++L) {
                t[0][A][L] = 1;
            }
        }

        for (int i = 1; i <= n; i++) {
            for (int A = 0; A <= 1; A++) {
                for (int L = 0; L <= 2; L++) {

                    long result = t[i - 1][A][0];            // P ---> solve(n-1, absent, 0) % M;
                    result += (L < 2 ? t[i - 1][A][L + 1] : 0);  // L ---> solve(n-1, absent, consecutive_late+1) % M;
                    result += (A == 0 ? t[i - 1][A + 1][0] : 0);  // A ---> solve(n-1, absent+1, 0) % M;

                    t[i][A][L] = (int) (result % M);
                }
            }
        }

        return t[n][0][0];
    }
}


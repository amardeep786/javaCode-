647. Palindromic Substrings  :: https://leetcode.com/problems/palindromic-substrings/description/

***************************************************************************************************************************************************


/*
class Solution {
    public int countSubstrings(String s) {
        
        //*******************METHOD 1 BRUTE FORCE************************/

/*
        
        int n = s.length();
        int count = 0;
        for(int i =0;i<s.length();i++)
        {
            for(int j = i;j<n;j++)
            {
                if(isPalindrome(s.substring(i,j+1)))
                {
                    count++;
                }
            }
        }
        return count;
    }

    public boolean isPalindrome(String str)
    {
        if(str.length() == 1)
        return true;
        int len = str.length();        ------------->>> implement recursively so that memoization can be done easily
        for(int i = 0;i<len/2;i++)
        {
            if(str.charAt(i) != str.charAt(len-i-1))
            return false;
        }

        return true;


    }

*/

        //********************METHOD 2********** *******************************************************************************************************88*/


/*
class Solution {
    public int countSubstrings(String s) {

        int n = s.length();
        int count = 0;

        boolean dp[][] = new boolean[1001][1001];

        for(boolean[] row :dp)
        {
            Arrays.fill(row,false);
        }


        for(int i =0;i<s.length();i++)
        {
            for(int j = i;j<n;j++)
            {
                if(isPalindrome(i,j,s,dp))
                {
                    count++;
                }
            }
        }
        return count;
    }

    public boolean isPalindrome(int i,int j,String str,boolean dp[][])
    {
        if(str.length() == 1)
        return true;
        
       if(i>j)       // agr i jo hai wo j ko cross kr gya to true hoga 
       return true;

       if(dp[i][j] != false)
       return dp[i][j];

       if(str.charAt(i) == str.charAt(j))     // agr charcter equal to further check kro ki equal hai ki nai 
       {
           return dp[i][j]=isPalindrome(i+1,j-1,str,dp);
       }

       return false;
        
    }
}

*/
// ******************BOTTOM UP *****************************************************************************************************************************



class Solution {
    public int countSubstrings(String s) {

        int n = s.length() ;
        int count = 0;
        boolean t[][] = new boolean[n][n];  // dp[i][j] = true means substring from i to j index is palindrome else not

        for(int length = 1 ;length <=n;length++)        // for every length 
        {
            for(int i = 0;i+length-1<n;i++)  // for every index
            {
                int j = i+length-1  ;   // every time 0 se j tkk for example length = 4 then 0->4 , 1->4 ,2->4,3->4 etc in sbko dekhna h paindrome hai ki nai

                if(i==j)   // if 1 length -> palindrome
                {
                    t[i][j] = true ; 
                }
                else if(i+1 == j)
                {
                    t[i][j] = s.charAt(i) == s.charAt(j) ;  // agr 2 length to dekhlo ki same hai ya alag
                }else
                {
                    t[i][j] = (s.charAt(i) == s.charAt(j) && t[i+1][j-1]) ;  // agr first and last char equal hai and remain b palin hai to true else false
                }

                if(t[i][j] == true)
                count++ ;
            }
        }

        return count;
    }
}

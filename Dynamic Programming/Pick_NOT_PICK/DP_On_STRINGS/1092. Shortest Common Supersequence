1092. Shortest Common Supersequence :: https://leetcode.com/problems/shortest-common-supersequence/

*************************************************************************************************************************************************


class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        
        // recursive and memo code check for gfg same problem  .. here we will need bottom up code

        // logic for bottom up

        /*

            end s charcter matching krege and if they are equal to dono k pointer ko minus krege

            else dono chacter s minimum jo hoga wahi ans hoga

        */


        

        int n = str1.length();
        int m = str2.length();

        int dp[][] = new int[n+1][m+1];

        for(int i = 0;i<n+1;i++)
        {
            for(int j = 0;j<m+1;j++)
            {
                if(i==0 || j==0)
                {
                    dp[i][j] = i+j ;
                }
                else if(str1.charAt(i-1) == str2.charAt(j-1))
                {
                    dp[i][j] = 1 + dp[i-1][j-1] ;  // agr chr equal hai to 1 + pichhle wala
                }else
                {
                    dp[i][j] = 1 + Math.min(dp[i-1][j] , dp[i][j-1]);
                }
            }
        }

        //  yaha tkk hmara 2D array bn gya hoga of shortest comon supersequence ka

        // to hum last s start krege and agr and jo chhota hoga uski trf move krege

        StringBuilder result = new StringBuilder();

        int i = n , j = m;

        while(i>0 && j > 0)             // jbtk dono m string hain 
        {
            if(str1.charAt(i-1) == str2.charAt(j-1))
            {
                result.append(str1.charAt(i-1));
                i--;
                j-- ;
            }else if(dp[i-1][j] < dp[i][j-1]) // mtlb upr ki direction m jana h qki upr s min aaya
            {
                result.append(str1.charAt(i-1));
                i--;
            }else
            {
                result.append(str2.charAt(j-1));
                j--;
            }
        }

        while(i>0)  // agar j = 0 hua to str1 k saare character as it as add krdo
        {
            result.append(str1.charAt(i-1));
            i-- ;
        }

         while(j>0)     // agar i = 0 hua to str1 k saare character as it as add krdo
        {
            result.append(str2.charAt(j-1));
            j-- ;
        }


        // ab result reverse m aaya hoga qki last s start kia tha to fr s reverse krk ans return kro
        result.reverse();

        return result.toString();

    }
}

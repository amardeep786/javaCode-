1143. Longest Common Subsequence :: https://leetcode.com/problems/longest-common-subsequence/
-------------------------------------------------------------------------------------------------------------------------------------------------

//---------------------------------- recursion + memoization -----------------------------------------------------------------------------
/*
class Solution {

    int m,n;
    public int longestCommonSubsequence(String s1, String s2) {
        m = s1.length();
        n = s2.length();

        int[][] dp = new int[1001][1001];
        for(int[] row : dp)
        {Arrays.fill(row,-1);}

        return solve(s1,s2,0,0,dp);
    }

    public int solve(String s1, String s2,int i,int j,int[][] dp)
    {
        if(i >= m || j >= n)
        return 0;

        if(dp[i][j] != -1)
        return dp[i][j];

        if(s1.charAt(i)==s2.charAt(j))
        return dp[i][j]=1+solve(s1,s2,i+1,j+1,dp);
        

        return dp[i][j]=Math.max(solve(s1,s2,i,j+1,dp),solve(s1,s2,i+1,j,dp));
    }
}

*/

//-----------------------------------------------------------BOTTOM UP----------------------------------------------------------- 
class Solution {

    int m,n;
    public int longestCommonSubsequence(String s1, String s2) {
        int m = s1.length();
        int n = s2.length();
        int dp[][] = new int[m+1][n+1];

        for(int i = 0;i<m+1;i++)
        {
            dp[i][0] = 0;
        }

        for(int i = 0;i<n+1;i++)
        {
            dp[0][i] = 0;
        }

        for(int i = 1;i<m+1;i++)
        {
            for(int j = 1;j<n+1;j++)
            {
               
                    if(s1.charAt(i-1)==s2.charAt(j-1))
                    {
                        dp[i][j] = 1 + dp[i-1][j-1];
                    }else
                    {
                        dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                    }
                
            }
        }

        return dp[m][n];
    }
}

983. Minimum Cost For Tickets :: https://leetcode.com/problems/minimum-cost-for-tickets/
---------------------------------------------------------------------------------------------------------------------------------------------------

// recursive is simple - for every day we have 3 choices and take minimum + MEMO

/*

class Solution {
    public int mincostTickets(int[] days, int[] costs) {

        int n = days.length;
        int []dp = new int[366];
        Arrays.fill(dp,-1);
        return solve(days,costs,n,0,dp);  //starting from 0th day 
        
    }

    public int solve(int[] days, int[] costs,int n, int idx,int[]dp)
    {
        if(idx >= n)
        return 0;

        if(dp[idx] != -1)
        return dp[idx];

        // day1 pass
        int cost1 = costs[0] + solve(days,costs,n,idx+1,dp) ;  // we go for next day

        // for 7 day pass
        int maxDays = days[idx] + 7 ;
        int j = idx ;

        while(j<n && days[j] < maxDays)
        {
            j++;
        } 

        int cost7 = costs[1] + solve(days,costs,n,j,dp) ;

        // for day30 pass
        maxDays = days[idx] + 30 ;
        j = idx;
        while(j<n && days[j] < maxDays)
        {
            j++;
        } 

        int cost30 = costs[2] + solve(days,costs,n,j,dp) ;


        return dp[idx] = Math.min(cost1 , Math.min(cost7,cost30)) ;

    }
}

*/

// -------------------------------------------- BOTTOM UP ------------------------------------------------------------------------------------//
class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        
        int n = days.length;
        int lastDay = days[n-1];            // increasing order
        int dp[] = new int[lastDay+1];

        Set<Integer> set = new HashSet<>();
        for(var i : days)
        {
            set.add(i);
        }
        // cost[i] -> minimum cost till day i
        dp[0] = 0 ;  // 0 day kuj nai hota to 0 

        for(int i = 1;i<= lastDay;i++)
        {
            if(!set.contains(i))
            {
                dp[i] = dp[i-1];  // same prev day ka cost copy krdo
                continue;
            }

            // iss i pe yaa to ek din pehle s ek step lekr aaye honge 
            // yaa 7 step ya 30 step

            dp[i] =Integer.MAX_VALUE;

            int pass1 = costs[0] + dp[i-1];

            
            int pass7 = costs[1] + dp[Math.max(i-7,0)];       // agr negative hua to cost[0] = 0 jo hme chahiy 

            int pass30 = costs[2] + dp[Math.max(i-30,0)];


            dp[i] = Math.min(pass1,Math.min(pass7,pass30));
        }

        return dp[lastDay];
    }
}

239. Sliding Window Maximum :: https://leetcode.com/problems/sliding-window-maximum/
K Sized Subarray Maximum    :: https://www.geeksforgeeks.org/problems/maximum-of-all-subarrays-of-size-k3101/1

=============================================================================================================================================
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        // we will store index taaki hme pta lg skte knsa index 
        // curr s k pehle ka bhi h usey window s htane k lliy
        int n = nums.length;
        Deque<Integer> deq = new ArrayDeque<>();
        int[] res = new int[n-k+1];
        int idx = 0;
        for(int i = 0;i<n;i++)
        {
            // step 1 : dekhlo jo bhi index window k baahr k hai
            // usey htaado 
            
            while(!deq.isEmpty() && deq.getFirst() <= i-k)
            {
                deq.removeFirst();
            }
            
            // step 2 : ab jo eleent dalega usey chhote elements htaado 
            // qki wo ans m kbhi nai aaege
            while(!deq.isEmpty() && nums[deq.getLast()] < nums[i])
            {
                deq.removeLast();
            }
            
            // step 3 : ab curr index ko daal do
            deq.offer(i);
            
            // step 4 : ab ans daalo agr window k-1 index ko paar kr chuka h tohh
            if(i >= k-1)
            {
                res[idx++] = nums[deq.getFirst()];
            }
            
        }
        return res;
    }
}

3SUM : https://leetcode.com/problems/3sum/

*************************************************************************************************************************************************************************

class Solution {
    
     List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> threeSum(int[] nums) {
        
        //logic similar to two sum

        //since n1+n2+n3 = 0 so we find n2+n3 = -n1 ie 2sum with target -1
        // they asked elements so we can sort them 
        //duplication naa aaye isk liy hum {0,0,1,2,2} hai to j last ko point krega to 
        //to jbtk arr[j] = arr[j-1] hai pointer 1 ss ghtado taako same ans hum nearest 2 s le aaye
        //similarly i jo 0 ko point krega usko aage bdhaate jaao jbtk arr[i] = arr[i+1] hai


        // ek element ko n1 maan k baaki k 2 elements two sum s find krlo
        // then next element ko n1 and apply 2 sum

        Arrays.sort(nums);

       

        for(int i = 0;i<=nums.length-3;i++)
        {

            if(i>0 && nums[i] == nums[i-1])
            continue;

            int n1 = nums[i];
            twoSum(nums,i+1,-n1);
            //  if(temp.size()==3)
            //  res.add(new ArrayList<>(temp));
        }

        return res;
    }

    public void twoSum( int[] nums, int index,int target)
    {
       // List<Integer> funRes = new ArrayList<>();

        int i = index;
        int j = nums.length-1;
        while(i<j)
        {
            // if(nums[i]== nums[i+1])  //common elements skipped bt yaha s ek issue aa rha hai ki
            // {                        // [0,0,0] fail hojaega as i == i+1 to skip krdega
            //     i++;                   // isliye pehle ans nikaalte hain fr skip krege
            //     continue;
            // }
            // if(nums[j]== nums[j-1])     //common elements skipped
            // {
            //     j--;
            //     continue;
            // }

            int sum = nums[i]+nums[j];

            if(sum > target)
            {
                j--;
                
            }else if(sum < target)
            {
                i++;
               
            }else
            {
                //found ans
            
            // pehle ans add krlo tb skip krna taaki  [ 0,0,0] wale ans safe rhen

            while(i< j && nums[i] == nums[i+1])  // ab saare 0 skip krke last p khde hain
                {                       
                    i++;                   
                }
                while(i< j && nums[j]== nums[j-1])    
                {
                    j--;
                }

                   res.add(new ArrayList<>(Arrays.asList(-target,nums[i],nums[j])));

                   // return funRes;
                    i++;
                j--;
                }
                
                
        }

       // return new ArrayList<>();
    }
}

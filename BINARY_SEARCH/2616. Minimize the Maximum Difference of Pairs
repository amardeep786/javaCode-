2616. Minimize the Maximum Difference of Pairs :: https://leetcode.com/problems/minimize-the-maximum-difference-of-pairs/
---------------------------------------------------------------------------------------------------------------------------------------------------

/*
    BRUTE - generate all pairs then for every p pairs calculate max diff and store in result and finaaly takae minimum of all

*/


/*
    OPTIMIZED -> suppose minimum ans 3 aaya to iska mtlb aise p pairs honge jinka diff less than equal to 3 hoga tbhi to unn pairs m maximum hoga orr 
                 yehi 3 baaki k p pairs me minim hoga or hmare ans m hoga

    to minimum diff say 0 hoskta h to hum pehle dekh lenge ki kya 0 answer hoskta h 
    agr haan too p pairs honge jinka diff less than equal to 0 hoga agr nahi to fr dekhege ki kya 1 hoskta h ans . since hme minimum 
    chahiye to jese hi ans milega hum rukk jaaegee

    to linearly jaane k bjaaye hum binary search lgakr jaege 

    O(nlogn)

*/
class Solution {
    public int minimizeMax(int[] nums, int p) {

        int n = nums.length;

        // ans ka lower bound minimum diff hoga or upper to max - min ka diff 
        // hme array ko sort krna pdega qk diff hme kamm wala chahiy to sort krdege to diff kam k liy bss saath wala element hi chahiy
        // to sort krege taaki paas wale elements saath ho

        Arrays.sort(nums);

        int l = 0 , r = nums[n-1]-nums[0] ;    // min poss diff = 0  and max poss os last - first
        int ans = 0 ;
        while(l <= r)
        {
            int mid = l + (r-l)/2 ;

            if(isPossible(nums,mid,p))
            {
                ans = mid ;
                r = mid-1;
            }else
            {
                l = mid+1;
            }
        }

        return ans;
        
    }
    public boolean isPossible(int[] nums, int mid,int p)
    {
        int count = 0;

        int n = nums.length;

        int i = 0;
        while(i<n-1)
        {
            if(Math.abs(nums[i] - nums[i+1]) <= mid)  // agr mid s kam h toh 2 s bdhao 
            {
                count++ ;
                i += 2;}
            else            // else ek se 
            {
                i++;
            }
        }

        return count >= p ;
    }
}

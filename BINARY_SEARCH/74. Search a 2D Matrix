74. Search a 2D Matrix ::https://leetcode.com/problems/search-a-2d-matrix/
------------------------------------------------------------------------------------------------------------------------------------------------
// 1-D me convert krk binsearch lgaado ya 2-d me hi

// class Solution {
//     public boolean searchMatrix(int[][] matrix, int target) {
        
//         // hum 0th row or n-1 th col s start krge agr target bda h to row++ else col -- O(m*n)
//         int rows = matrix.length;
//         int cols = matrix[0].length;


//         int i = 0 , j = cols - 1 ;

//         while(i>= 0 && i < rows && j>= 0 && j<cols)  // jbtk within bounds hai
//         {
//             if(matrix[i][j] > target)
//             {
//                 j-- ;
//             }else if(matrix[i][j] < target)
//             {
//                 i++ ;
//             }else
//             {
//                 return true;
//             }
//         }

//         return false;

//     }
// }

// ---------- binary search ---------------------O(logn)-----------------------------------------------------------------------------------------//

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {

        int m = matrix.length , n = matrix[0].length;
        int l = 0 , r = n*m - 1 ;

        while(l <= r)
        {
            int mid = l + (r-l)/2 ;

            int row = mid / n;
            int col = mid % n ;

            if(matrix[row][col] > target)
            {
                r = mid - 1;
            }else if(matrix[row][col] < target)
            {
                l = mid + 1;
            }else
            {
                return true;
            }
        }
        return false;
    }
}

1802. Maximum Value at a Given Index in a Bounded Array :: https://leetcode.com/problems/maximum-value-at-a-given-index-in-a-bounded-array/
-------------------------------------------------------------------------------------------------------------------------------------------------
/*
     brute force jo bola h wo krdo fr dekhte h kya optimize krna h 

*/
// class Solution {
//     public int maxValue(int n, int index, int maxSum) {
        
//         // suppose ki array h n size ka toh uspe max element daalte rho

//         for(int val = maxSum ;val >= 1;val --)
//         {
//             // since sum ko chhote s chhota b rkhana h to consective me 1 s kam ka diff b rkhege
//             int leftSum = 0 , rightSum = 0;

//             int k = 1;
//             for(int i = index-1;i>= 0;i--)
//             {
//                 if(val-k < 1)
//                 {
//                     leftSum += 1;
//                 }else
//                     leftSum += val-k;

//                 k++;
//             }

//             int r = 1;
//             for(int i = index+1;i<n;i++)
//             {
//                 if(val-r < 1)
//                 {
//                     rightSum += 1;
//                 }else
//                     rightSum += val-r;

//                 r++;
//             }

//             if(leftSum + rightSum + val <= maxSum)
//             {
//                 return val ;
//             }
//         }

//         return 1;
//     }
// }

// ---------------------  OPTIMIZATION ----------------------------------------------------------------------------------------------//

/*

hum har baar left right ka jo sum nikal rhe hain wo TLE de rha h to usey km kr skte h
    say index ki value x rkhni h toh usey pehle x-1 ,x-2,x-3 till 1 fr agr jgeh bchi h toh 1,1,1
    to sum index*x - (sum of index natural numbr )   // isi formula s sum aaege
    ||ly hum right bhi nikal lege 
    O(1) m sum aajaega

    or jo linearly dekh rhe ki mai ki value kya honi chahiye usey binary search s dekh lege
    O(logn)
*/
class Solution {
    public int maxValue(int n, int index, int maxSum) {
        
        long l = 1 , r = maxSum;  // max value is maxSum ie we can get

        int res = 0;

        while(l <= r)
        {
            
            long mid = (l+r)>>1 ;

            // ---------- get leftsum assum MID can be ans

            long leftCount = Math.min(index , mid -1);  // index elements honge left side me lekin agr hum use kam values (mid) k liy check kr rhe hain to hmaara 1 pehle aajaega 
                                                       // or baaki jgeh p 1 fill krna pdega to formula lgaane k liy 1 se hi aage ka getFormula method m bhejna pdega

            long leftSum = getSumByFormula(leftCount,mid);

            // ab hoskta h ki baaki k places p 1 honge to usey b add krna h
            leftSum += Math.max(0 , index-mid+1);



            // -----------  get Right ka sum -------------------------------------------------------------------------------------------------------------------------------------------//
            long rightCount = Math.min(n-index-1 , mid - 1);  // index elements honge left side me lekin agr hum use kam values (mid) k liy check kr rhe hain to hmaara 1 pehle aajaega 
                                                       // or baaki jgeh p 1 fill krna pdega to formula lgaane k liy 1 se hi aage ka getFormula method m bhejna pdega

            long rightSum = getSumByFormula(rightCount,mid);

            // ab hoskta h ki baaki k places p 1 honge to usey b add krna h
            rightSum += Math.max(0 , n-index-1 - mid + 1);    


            if(leftSum + rightSum + mid <= maxSum)
            {
                res = (int)mid;
                l = mid+1;
            }else
            {
                r = mid  - 1 ;
            }       
            
        
        }
        return res;
    }
    public long getSumByFormula(long index , long value)
    {
        return ( index * value) - (index * (index+1)/2);
    }
}

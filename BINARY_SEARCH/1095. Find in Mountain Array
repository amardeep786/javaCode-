1095. Find in Mountain Array :: https://leetcode.com/problems/find-in-mountain-array/
---------------------------------------------------------------------------------------------------------------------------------------------------

/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */


 // binary search lga dete hain peak nikal krr
 
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        
        
        int n = mountainArr.length();
         
        int idx = findPeakIndex(mountainArr, n );

        int leftAns = binSearch(mountainArr,0,idx,target);

        if(leftAns != -1)  // agr lef s ans nai aaya tohh right s laao
        {
            return leftAns ;
        }

        return binSearchDescendingArray(mountainArr,idx+1,n-1,target);

    }

    public int binSearch(MountainArray mountainArr,int l , int r , int target)
    {
        int ans = -1;

        while(l <= r)
        {
            int mid = l + (r-l)/2 ;
            int ele = mountainArr.get(mid);
            if(ele == target)
            {
                return mid;
            }else if(ele > target)
            {
                r = mid -1;
            }else
            {
                l = mid + 1;
            }
        }

        return ans;
    }

    // descending array m bins search 
    public int binSearchDescendingArray(MountainArray mountainArr,int l , int r , int target)
    {

        int ans = -1;

        while(l <= r)
        {
            int mid = l + (r-l)/2 ;
            int ele = mountainArr.get(mid);
            if(ele == target)
            {
                return mid;
            }else if(ele > target)
            {
                l = mid + 1;
            }else
            {
                r = mid - 1;
            }
        }

        return ans;
    
    }


    public int findPeakIndex(MountainArray mountainArr, int n )
    {
        int l = 0 , r = n-1 ;

        int idx = -1 ;

        while(l <= r)
        {
            int mid = l + (r-l)/2 ;

            int ele = mountainArr.get(mid);
            
            if (mid == r) 
            {
                // to only option ki left jaao
                idx = mid ;
                r = mid - 1 ;
            }else if(ele < mountainArr.get(mid+1)) // sahi h order to peak right m kahi hoga
            {
                idx = mid + 1;
                l = mid + 1 ;
            }else
            {
                idx = mid ;
                r = mid - 1;
            }
        }

        return idx;
    }
}

2092. Find All People With Secret : https://leetcode.com/problems/find-all-people-with-secret/description/

//******APPROACH - 1 ************************************************************************************************************************************//

class Solution {
    public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {
        
        //******APPROACH - 1 ****************//

        //mai ek array bna leta hu boolean jisme jisko jisko secret pta hai wo true honge
        // person 0 and firstPerson ko to shuru me hi secret pta hoga to mark true

        boolean [] knowSecret = new boolean[n];
        knowSecret[0] = true;
        knowSecret[firstPerson] = true;

        //ab mai meeting ko time k base p sort krleta hu taaki kam time p jinki meeting hai unhe 
        //pehle secret pta lge agr inko abhi pta nai lgega to guarantee hai ki inko baad me bhi pta 
        //nai lgega  .  random hota ho pehle ans m gadbad hoskta h

        // Arrays.sort(meetings , (a,b)-> Integer.compare(a[2],b[2]));

        //lekin ye given hai ki ek bnda same time pe multiple meeting attend krskta hai isliy sort nahi krege
        //toh time equal hua or ek hi bnda multiple jgeh hua to ans galat hoskta h tb knsi meeting pehle 
        //le rhe ho uss baat p depend krega

        // toh mai ek TREEMAP le leta hu jiski keys time hongi or values me wo persons jinki meeting 
        // uss smy pr hongi . since ek bnde ki multiple meeting same time p ho skti hai to mai values me
        // ARRAYLIST of integers le lunga .

        Map<Integer,ArrayList< int[]>> timeAndMeeting = new TreeMap<>();

        //values daalo isme keys time hogi or values array of 2 persons

        for(var meet : meetings ) 
        {
           if( !timeAndMeeting.containsKey(meet[2]))
           {
               timeAndMeeting.put(meet[2],new ArrayList<>());
           }
           timeAndMeeting.get(meet[2]).add(new int[]{meet[0],meet[1]});
        }
        /////////////////////////////////////////
//         for (Map.Entry<Integer, ArrayList<int[]>> entry : timeAndMeeting.entrySet()) {
//     System.out.print("key " + entry.getKey() + " value -> ");
//     ArrayList<int[]> arrayList = entry.getValue();
//     for (int[] array : arrayList) {
//         System.out.print("[");
//         for (int i = 0; i < array.length; i++) {
//             System.out.print(array[i]);
//             if (i < array.length - 1) {
//                 System.out.print(", ");
//             }
//         }
//         System.out.print("] ");
//     }
//     System.out.println();
// }
///////////////////////////////////

        // mere pass time k corresponding meeting to aagyi but muje uss list me traverse krke ye b to dekhna hoga ki 
        // aur kiski usi smy p aage meeting hai E.G ->  time 3 pe  (4-5) ki meeting hai to ye b check krna hoga ki isi 
        //time pe 4 ya 5 kisi or se to nai meeting kr rhe agar aisa hai toh unko b isi smy p secret pta lg jana chahiye and 
        //wo hmaare ans me b add honge 
        // to iske liy mai adjacency list bna leta hu ir GRAPH or jiski jiske saath meeting hai usey connect krdunga 
        //baad me ispe BFS ya DFS maar ke dekh lunga kon kisse connected hai 


        for(var entry : timeAndMeeting.entrySet())
        {

            int time = entry.getKey();

            ArrayList< int[]> meetAtSameTime = new ArrayList<>();
            meetAtSameTime.addAll( entry.getValue());

             //********************************* */

    //                     //ArrayList<int[]> arrayList = entry.getValue();
    //         for (int[] array : meetAtSameTime) {
    //             System.out.print("[");
    //             for (int i = 0; i < array.length; i++) {
    //                 System.out.print(array[i]);
    //                 if (i < array.length - 1) {
    //                     System.out.print(", ");
    //                 }
    //             }
    //             System.out.print("] ");
    //          }
    // System.out.println("iteration ");


             //*********************************** */

            //ab graph bnaate hai ek time p jinki meeting hai un bndo ka

            Map<Integer,ArrayList<Integer>> adj = new HashMap<>(); //a ->{b,c,d}

          

            Set<Integer> alreadyAdded = new HashSet<>(); //koi element dubara na add ho isliy

            for(var people : meetAtSameTime)
            {
                int person1 = people[0];
                int person2 = people[1];

                if(!adj.containsKey(person1))
                {
                    adj.put(person1,new ArrayList<>());
                }

                adj.get(person1).add(person2);

                //person 2
                if(!adj.containsKey(person2))
                {
                    adj.put(person2,new ArrayList<>());
                }

                adj.get(person2).add(person1);
            }
                //map ban gya hai ab dekhlo agar visited nai hai to que m daalo or saath vale
                // ko SECRET btaao ie mark true
                // agar kisiko secret pta hai or wo add nai hai to usko add krke waha se BFS shur 
                //kardo


                for(var meet1 : timeAndMeeting.get(entry.getKey()))
                {
                    int person1 = meet1[0];
                    int person2 = meet1[1];
                if(knowSecret[person1]== true && (!alreadyAdded.contains(person1)))
                {
                   
                    alreadyAdded.add(person1);
                }

                //same for person 2

                 if(knowSecret[person2]== true && (!alreadyAdded.contains(person2)))
                {
                    
                    alreadyAdded.add(person2);
                }

            }

            

            //graph ban chuka hai or ab ye b pta hai kon kisse mila hai

              Queue<Integer> que = new LinkedList<>(alreadyAdded); //BFS k liy

            //do BFS

            while(!que.isEmpty())
            {
                int person = que.poll();

                for(var neigh : adj.get(person))
                {
                    if(knowSecret[neigh]==false)  //agar neigh nahi jaanta hai to
                    {
                       knowSecret[neigh]=true ;//usey pta krwao
                        que.offer(neigh);
                    }
                }

            }

        }

        

        //ab jinko jinko pta hai usey list m daal k return krwao

        List<Integer> res= new ArrayList<>();

        for(int i = 0;i<knowSecret.length;i++)
        {
            if(knowSecret[i] == true)
            res.add(i);
        }


        return res;




    }
}

//******APPROACH - 2 ************************************************************************************************************************************//

   class Solution {
    public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson){

        // hum person wise mmap bna lete hain ki person 1 ki meeting kiske saath kb kb hai

            Map<Integer,List<int[]>> adj = new HashMap<>();

            for (int i = 0; i < meetings.length; i++) {
    adj.putIfAbsent(meetings[i][0], new ArrayList<>());
    adj.putIfAbsent(meetings[i][1], new ArrayList<>());
    
    adj.get(meetings[i][0]).add(new int[]{meetings[i][1], meetings[i][2]});
    adj.get(meetings[i][1]).add(new int[]{meetings[i][0], meetings[i][2]});
}


            Queue<int[]> que = new LinkedList<>();
            que.offer(new int[]{0,0});
            que.offer(new int[]{firstPerson,0});

            int [] timeToKnowMeet = new int[n];
            Arrays.fill(timeToKnowMeet,Integer.MAX_VALUE);

            timeToKnowMeet[0]=0;
            timeToKnowMeet[firstPerson] = 0;  // 0 and firstPerson ko 0 time pe pta lga

            while(!que.isEmpty())
            {
                int person[] = que.poll();

                int person1 = person[0];
                int time  = person[1];

                if(adj.get(person1) != null)
                for(var neigh : adj.get(person1))
                {
                    int person2 = neigh[0];
                    int neighbor_time = neigh[1];

                    if(neighbor_time >= time && timeToKnowMeet[person2] > neighbor_time)  // neighbor ko baaad me pta lga &&
                    {                                                                      //  uska time kuj kam mila 
                        que.offer(new int[]{person2,neighbor_time});
                        timeToKnowMeet[person2] = neighbor_time;
                    }



                }


            }



            List<Integer> res = new ArrayList<>();

            for(int i = 0;i<n;i++)
            {
                if(timeToKnowMeet[i] != Integer.MAX_VALUE)
                {
                    res.add(i);
                }
            }

            return res;





    }
}

3112. Minimum Time to Visit Disappearing Nodes  :: https://leetcode.com/problems/minimum-time-to-visit-disappearing-nodes/description/

************************************************************************************************************************************************

class Solution {
    public int[] minimumTime(int n, int[][] edges, int[] disappear) {
        
        
        int[] shortestDist = new int[n];
        
        Arrays.fill(shortestDist, -1);
        
        boolean visited[] = new boolean[n];
        
        
        Map<Integer,ArrayList<int[]> > map = new HashMap<>();  // vertex-> [neigh,cost]
        
        for(var edge : edges)          // make graph which is undirected
        {
            if(!map.containsKey(edge[0]))
            {
                map.put(edge[0],new ArrayList<>() );
            }

            map.get(edge[0]).add(new int[]{edge[1],edge[2]});
            
            if(!map.containsKey(edge[1]))
            {
                map.put(edge[1],new ArrayList<>() );
            }
            
            map.get(edge[1]).add(new int[]{edge[0],edge[2]});
        }


        //shortest path 
        
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a,b)->a[1]-b[1]);
        pq.offer(new int[]{0,0});
        
        while(!pq.isEmpty())
        {
            int temp[] = pq.poll();

            int source = temp[0];
            int cost = temp[1];

             if(visited[source] || cost >= disappear[source])  // agar cost jaada h disappear to kuj nai krna h
                continue ;

            visited[source] = true ;
            shortestDist[source] = cost;

            if(map.get(source)!= null)
            {
                for(var neigh : map.get(source))
                {
                    if(!visited[neigh[0]])        // jo bhi unvisited hai unko que m daal kr updated cost daalo
                    {
                        pq.offer(new int[]{neigh[0],neigh[1]+cost});
                    }
                }
                    
            }
        }


        
        return shortestDist ;
        
    }
    
   
    
}

3312. Sorted GCD Pair Queries :: https://leetcode.com/problems/sorted-gcd-pair-queries/description/
---------------------------------------------------------------------------------------------------------------
/*

hrek pair nikalne s TLE aa jaega to hum nums[i] ki range dekhte hain usey kuj hoskta h kya 

ek kaam krte hain hrek number ka divisor store krlete hain ek array me

arr[i] = j means   i divisor j baar aaya h poore array k elements k divisor me 


*/
class Solution {
    public int[] gcdValues(int[] nums, long[] queries) {
        
       long divisorOfElements[] = new long[50001];
        int n = nums.length;
       // store every divisor in divisor array

       for(var e : nums)
       {
            for(int i = 1;(i*i)<=e;i++)
            {
                if(e%i == 0)
                {
                    int x = i ;
                    int y = e/i ;


                    // agr number perfect square haito ek baar judega 
                    if(x == y)
                    {
                        divisorOfElements[x]++ ;
                    }else
                    {
                        divisorOfElements[x]++ ;
                        divisorOfElements[y]++ ;
                    }
                }
            }
       }

       // yaha tkk hmne hrek no ka hrek divisor store krlia h 

       // ab suppose ki arr[i] = j hai mtlb ki total j elements aise the jinme i ek divisor tha 
       // mtlb ki j*(j-1)/2 pairs ho gaye inn elements k to ek kaam krte hain ab isi array k values 
       // pair m represent krdege isi formula s ie arr[i] = j means j pair total bnege jisme i dovisor tha 

       for(int i = 1;i<= 50000 ;i++)
       {
            long value = divisorOfElements[i];

            divisorOfElements[i] = value * (value-1) / 2 ;
       }

       // ab hme ye pta lgg gya h ki hrek divisor kitne pair m contri krege 

       // ab last s travel krte hain and suppose i = 4 p hain to isske maanlo 8 pairs m contribute kia 
       // to 4 k divisor me khud  1 , 2 aata h mtlb 4 ka jitne pairs hain wo 2 ka pairs m b count ho rhe honge 
       // to hme 4 k jitne pairs hain uske 4 k divisors me  s htana pdega to last s travel krk ye krlete hain pehle 

       for(int i = 50000 ; i >= 1;i--)
       {
            if(divisorOfElements[i] > 0)
            {
                // jitne bhi divisor hain i k unn sbme s i k pair htao

                for(int j = 1 ; (j*j) <= i ;j++)
                {
                    if(i % j == 0)
                    {
                        int x = j ;
                        int y = i/j ;

                        if(x == y && y != i)
                        {
                            divisorOfElements[x] -= divisorOfElements[i];
                        }else
                        {
                        
                            if(x != i)   // qki equal hue toh hum main loop m handle kr lege 
                            divisorOfElements[x] -= divisorOfElements[i];

                            if(y != i)
                            divisorOfElements[y] -= divisorOfElements[i];
                        }
                    }
                }
            }
       }

       // bss ab hmare paas aagya h knsa divisor kitne pair ka GCD hai bss ab queries ko handle krna h 

       // sbhi pairs ka sum krdete hain and prefix sum bnaa lete hai . WHY ? 
       // qki suppose query hai 5 mtlb hme 6th value btaani h to binary search lgaakr 6th value kis index p hai wo
       // aajaega to wahi index (ir divisor hmara ans hoga )

       for(int i=1;i<= 50000;i++)
       {
            divisorOfElements[i] = divisorOfElements[i] + divisorOfElements[i-1];
       }

       // ab hrek query k liy binary search s position dhund lo 
       // suppose array [2,3,5] and hme query 4 dia h mtlb ki hm 5 ka index return krege wahi ttkk 5 elemen hue honge 

        int[] ans = new int[queries.length];
        int idx = 0 ;
       for(var q : queries)
       {
            ans[idx++] = (int)lowerBound(divisorOfElements , q+1) ;
       }

       return ans ;

    }

    private long lowerBound(long[] arr, long ele) {
    int i = 0, j = arr.length;

    while (i < j) { // Changed to i < j for binary search logic
        int mid = i + (j - i) / 2;

        if (arr[mid] < ele) {
            i = mid + 1;
        } else {
            j = mid;
        }
    }

    return i; // Returning the correct index for lower bound
}

} 

37. Sudoku Solver  :: https://leetcode.com/problems/sudoku-solver/
---------------------------------------------------------------------------
class Solution {
    public void solveSudoku(char[][] board) {

       solve(board); 
    }

boolean solve(char [][] board )
    {
        int n = board.length;
        int row = -1;
        int col = -1 ;

        boolean emptyLeft = true;  // flag to check whether any board has any empty slots or not
        for(int i  = 0;i < n;i++)
        {
            for(int j = 0;j<n;j++)
            {
                if(board[i][j] == '.')
                {
                    row = i ;
                    col = j;
                    emptyLeft = false;
                    break;
                }
            }

            if(emptyLeft == false)  // if we find any empty cell in board
            {
                break;
            }
   
        }

        if(emptyLeft)  // in BOARD no empty element is there 
            {return true;} // and sudoku is solved

        
        for(char number = '1'; number <='9';number++)
        {
             if(isSafe(board, row, col, number))
            {
                board[row][col] = number;

                if(solve(board))
                {
                    //found ans
                    return true;
                }
                else
                {
                    board[row][col] = '.';
                }
            }
        }
        return false;

    }

 boolean isSafe(char [][] board , int row,int col,char num)
{
    for(int i = 0 ;i<board.length;i++) // check in that row
    {
        if(board[row][i] == num)
        {return false;}
    }

    for(int i = 0 ;i<board.length;i++) // check in that column
    {
        if(board[i][col] == num)
        {return false;}

    }

    int n = (int)Math.sqrt(board.length);

    int startRowSubMatrix = row - (row%n);
    int startColSubMatrix = col - (col%n);

    for(int i = startRowSubMatrix ; i<startRowSubMatrix+n;i++)
    {
        for(int j = startColSubMatrix ; j<startColSubMatrix+n;j++)
        {
          if(board[i][j] == num)
          {return false;}   
        }
    }

    return true;

}

    
}

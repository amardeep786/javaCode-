950. Reveal Cards In Increasing Order :https://leetcode.com/problems/reveal-cards-in-increasing-order/description/

***************************************************************************************************************************************

class Solution {
    public int[] deckRevealedIncreasing(int[] deck) {
        
        //*********APPROACH - 1**************************************************************************//

        // hm sbse chhota element pehle rkhege then second smallest ko 1 gap chhor kr qki first element k baad 
        // second element ko sbse peeche jana h to third ko reveal krege ans k liye

        // to isi way me saare elements ko ans m fill krdo

        int n = deck.length;
        int[] res = new int[n];

        boolean skip = false ;  //tells whether to skip 1 posiition or not

        Arrays.sort(deck);    // taaki smallesst element ya usse next smallest ko dhundna naa pde baar baar

        // int idx = 0;
        
        // for(int i = 0;i<n;i++)   // iss loop ko lgaane m ye issue hai ki i ko har baar bdha rhe hain 
        // {                          // jbki i ko sirf tbhi bdhana h jb hmene usey result m daal dia

        //     if(skip == false)
        //     {
        //         if(res[idx]==0)
        //         {res[idx] = deck[i];

        //         skip = !skip;
        //         idx = (idx+1)%n ;
        //     }
                
        //     }else
        //     {
        //             if(res[idx]==0)
        //             {
        //                 if(skip == false)
        //             {   
        //                 res[idx] = deck[i];
        //                 skip = !skip;                    
        //                 idx = (idx+1)%n ;
        //             }
        // }


        int i = 0, j = 0;

        while(i<n)
        {
            if(res[j]== 0)
            {
                if(skip == false)
                {
                    res[j] = deck[i];
                    i++ ;
                }
                skip = !skip ;

            }
            
            j = (j+1)%n ;
        }

         return res;
    }
}

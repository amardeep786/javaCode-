45. Jump Game II : https://leetcode.com/problems/jump-game-ii/description/

********************************************************************************************************************

class Solution {
    public int jump(int[] nums) {
        
        int n = nums.length;
        boolean visited[] = new boolean[n];  //to mark visited a particular index
        visited[0] = true;  //coz initially we are at 0 so visited

        Queue<Integer> que = new LinkedList<>();
        que.offer(0);

        int count = 0;
        while(!que.isEmpty())
        {
            int size = que.size();

           // System.out.print(size+" ");
            while(size-- != 0)
            {
                int index = que.poll();
                if(index == n-1)
                    return count;
                
                int num = nums[index];

                for(int i = 0;i<= num;i++)
                {
                    int next = index + i ;

                    if(next >= n)
                    {
                        break ;
                    }
                    //System.out.print(next+" ");
                    if(!visited[next])
                    {
                        que.offer(next);
                        visited[next] = true ;
                    }
                }

            }

            count++ ;
            
        }

        return count ;

    }
}

// ============================ gfg ====================================================================//
class Solution {
    static int minJumps(int[] arr) {
        
        int n = arr.length;
        
        // agr ek ya usse kam value hai to 0 jump lgega
        if(n <= 1)
        {
            return 0;
        }
        
        
        // agr pehli value hi greater h last index s toh 1 jump m hi phoch jaege
        if (arr[0] >= arr.length-1)
            return 1;
        
        // ek s jada element h orr first value 0 s toh aage hi nai bdh paege to -1 return krdo
        if(arr[0] == 0)
        return -1;
        
        
        // pehli value 0 nai h to hmen ek jump lelia and ab max hum arr[0] door tkk jaa skte hain 
        // to farthest arr[0]
        // orr eg steps = 5 hai too hum hreak step lekr farthest update krte jaege and steps 
        // ghtaate jaaege 
        // jb steps 0 hogya orr abhi b hum destination nai phoche
        // to jump bdhana pdega or steps ko reset krdege fr se 
        
        int jumps = 1 , farthest = arr[0] , steps = arr[0] ;
        
        
        for(int i = 1;i<n;i++)
        {
            
            if(i == n-1)
            return jumps ;
            
            if(i + arr[i] >= n-1)
            return 1 + jumps ;
            
            
            farthest = Math.max(farthest,i+arr[i]);
            
            steps-- ;
            
            
            if(steps == 0)
            {
                jumps++ ;
                
                if(i >= farthest)
                return -1 ;
                
                
                steps = farthest - i ;
            }
            
            
        }
        
        return -1 ;
    }
}

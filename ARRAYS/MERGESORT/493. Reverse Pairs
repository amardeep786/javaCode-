493. Reverse Pairs :: https://leetcode.com/problems/reverse-pairs/
--------------------------------------------------------------------------------------
class Solution {
    public int reversePairs(int[] nums) {
        
        int n = nums.length;

        return mergeSort(nums,0,n-1);
    }
    private int mergeSort(int[]nums,int l,int r)
    {
        int ans = 0;

        if(l<r)
        {
            int mid = l+(r-l)/2;

            ans += mergeSort(nums,l,mid);
            ans += mergeSort(nums,mid+1,r);

            ans += merge(nums,l,mid,r);
        }
        return ans;
    }

    // private int merge(int[] arr,int l,int mid,int r)
    // {
    //     int temp[] = new int[r-l+1];
    //     int k = 0;
    //     int count = 0;

    //     int i = l , j = mid+1;

    //     while(i<=mid && j <= r)
    //     {
    //         if(arr[i] > 2L*arr[j])
    //         {
    //             count += (mid-i+1);
    //             temp[k++] = arr[j++];
    //         }else 
    //         {
    //             temp[k++] = arr[i++];
    //         }
    //     }


    //     while(i<=mid)
    //     {
    //         temp[k++] = arr[i++];
    //     }

    //     while(j <=r)
    //     {
    //         temp[k++] = arr[j++];
    //     }

    //     // copy to original array
    //     int idx = 0;
    //     for(int t = l;t<=r;t++)
    //     {
    //         arr[t] = temp[idx++];
    //     }

    //     return count;
    // }

    private int merge(int[] arr, int l, int mid, int r) {
        int count = 0;
        int j = mid + 1;

        // Count reverse pairs before actual merge
        for (int i = l; i <= mid; i++) {
            while (j <= r && arr[i] > 2L * arr[j]) {
                j++;
            }
            count += (j - (mid + 1));
        }

        // Merge step
        int[] temp = new int[r - l + 1];
        int i = l, k = 0;
        j = mid + 1;

        while (i <= mid && j <= r) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
            }
        }

        while (i <= mid) {
            temp[k++] = arr[i++];
        }

        while (j <= r) {
            temp[k++] = arr[j++];
        }

        // Copy merged array back to original array
        System.arraycopy(temp, 0, arr, l, temp.length);

        return count;
    }

}

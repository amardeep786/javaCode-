1306. Jump Game III : https://leetcode.com/problems/jump-game-iii/description/

********************************************************************************************************************

class Solution {
    public boolean canReach(int[] nums, int start) {
        
        int n = nums.length;
        boolean visited[] = new boolean[n];  //to mark visited a particular index
        visited[start] = true;  //coz initially we are at start so visited

        Queue<Integer> que = new LinkedList<>();
        que.offer(start);

        //int count = 0;
        while(!que.isEmpty())
        {
    
                int index = que.poll();
                if(nums[index] == 0)
                    return true;
                
                
                    int next1 = index + nums[index];
                    int next2 = index - nums[index];

                    if(next1 <= n-1 && !visited[next1])
                    {
                        que.offer(next1);
                        visited[next1] = true ;
                    }

                    if(next2 >= 0 && !visited[next2])
                    {
                        que.offer(next2);
                        visited[next2] = true ;
                    }
                }
            

        return false ;

    }
}

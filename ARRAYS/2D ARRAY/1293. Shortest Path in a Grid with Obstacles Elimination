1293. Shortest Path in a Grid with Obstacles Elimination : https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/

********************************************************************************************************************************************

class Solution {
    
    //simple BFS MODIFICATION
    
    int [][] direction = {{-1,0},{0,1},{1,0},{0,-1}};
    
    public int shortestPath(int[][] grid, int k) {
        
        int m = grid.length;
        int n = grid[0].length;
        boolean visited[][][] = new boolean[41][41][1601]; // to store coordinates and k value and check visited or not
        
        Queue<int[]> q = new LinkedList<>();
        
        q.offer(new int[]{0,0,k});
        visited[0][0][k] = true;
        
        int count = 0;
        while(!q.isEmpty())
        {
            int size = q.size();
                
            while(size-- != 0)
        {
            int [] temp = q.poll();
            int x = temp[0];
            int y = temp[1];
            int obstacle = temp[2];
            
            if(x == m-1 && y == n-1)
            {
                return count;
            }
            
            for(var dir : direction)
            {
                int new_i = x + dir[0];
                int new_j = y + dir[1];
                
                if(new_i < 0 || new_i > m-1 || new_j < 0 || new_j > n-1)   //agr nya direction outof bound hai to kuj nai krna h
                {
                    continue ;
                }
                
                if(grid[new_i][new_j] == 0 && !visited[new_i][new_j][obstacle])  //agar nya rsta 0 hai orr wo visited bhi nai h  to queue m daal ka usey visited krdo 
                {
                    q.offer(new int[]{new_i,new_j,obstacle});
                    visited[new_i][new_j][obstacle] = true ;
                }else if(grid[new_i][new_j] == 1 && obstacle>0 && !visited[new_i][new_j][obstacle-1])  // agar nya rste pe obstacle hai and obstacle pehle relaxation 0 s jaada hai 
                {                                                                                       // and ab obstacle -1 ko check krege kuki rste m obstacle tha to obstacle 1 s decreas hua
                    q.offer(new int[]{new_i,new_j,obstacle-1});
                    visited[new_i][new_j][obstacle-1] = true ;
                    
                }
            }
            
            
        }
            count++ ;
    }
        return -1 ;
    }
}

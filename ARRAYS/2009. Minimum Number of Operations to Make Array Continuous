2009. Minimum Number of Operations to Make Array Continuous  :: https://leetcode.com/problems/minimum-number-of-operations-to-make-array-continuous/description/

**************************************************************************************************************************************************************************


// class Solution {
//     public int minOperations(int[] nums) {
        
//         //**APPROACH*************** */

//         // hum jb bhi elements ko change krne k baad sort krk dekh rhe hai to wo sorted aa rha hai and sbhi
//         // elelemt ka difference bhi 1 hai 

//         // to hum hrek element ko apna minimum range maanege and upper range to since n-1 size bola hai 
//         // to upper range  any element say x and upper is x+n-1 eg if elemnt 5 hai to total size 4 hai array 
//         // ka tohh 5-8 element hi present hone chahiye result me tbhi sb unique honge or maximum -minimum
//         // ka diff n-1 k brabr aaega 

//         // set bhi lena pdega qki hoskta h element to to range m ho pr fr bhi kisi ko change krna pde
//         // eg [1 2 2 3]  ab isme agr 1 ko mini maanta hu to upper range 1+n-1 = 1+3 = 4
//         // to saare element 1-4 k beech m hi h to ans 0 aaega but kisi ek 2 ko chnge krk 4 krna pdega
//         // tbi sb unique honge and max - min ka ans b n-1 hoga






//         int n = nums.length;

//         int ans = Integer.MAX_VALUE;
        
//         for(int i = 0;i<n;i++)
//         {
//             Set<Integer>set = new HashSet<>();
//             int leftRange = nums[i];
//             int rightRange = nums[i]+n-1;
//             int count = 0 ;  // count for ki kitne element iss range s baahr hai to unhe change krna pdega

//             for(int j = 0;j<n;j++)
//             {
//                 if(nums[j] >= leftRange && nums[j] <= rightRange && (!set.contains(nums[j])))
//                 {
//                     set.add(nums[j]);
                    

//                 }else
//                 {
//                     count++ ;
//                 }
//             }

//             ans = Math.min(ans,count);
//         }

//         return ans;
//     }
// }

/**********ABOVE APPROACH GIVES TLE  reason -> hum baar baar poore array p traverse krke jo number out of range hain
 
 unka count nikaaal rhe the to agr isey optimize krde too kaam bn skta h

  iske liy hum array ko sort kr skte hain taaki jb hum kisi element ko minimum maane tohh uska index hme pta hai
 to uss index s pehle waale khud hi put of range ho jaege 

 orr agr upper range k index k baad wale bhi out of range jo toh jb hme in_range wale mil gye to total - in range krk out
 range wale bhi mil jage 

isme sbhi elemenent ko set m daalkr duplicate ko hta denge qki aise b ans aajaega
 */

//  class Solution {
//     public int minOperations(int[] nums) {

//         Set<Integer>set = new HashSet<>();
//         int n = nums.length;
//         int ans = Integer.MAX_VALUE;

//         for(int i = 0;i<n;i++)
//         {
//             set.add(nums[i]);
//         }
//         ArrayList<Integer> numsArr = new ArrayList<>(set);
//         Collections.sort(numsArr);

//         for(int i = 0;i<numsArr.size();i++)
//         {
            
//             int leftRange = numsArr.get(i);
//             int rightRange = leftRange + n-1;
//             int count = 0 ;  // count for ki kitne element iss range s baahr hai to unhe change krna pdega

//             int j = binSearch(numsArr,rightRange);

//             int inRangeElements =  j - i ;

//             int outRange = n - inRangeElements ;

//             ans = Math.min(ans , outRange);
//         }

//         return ans;

//     }

//     public int binSearch(ArrayList<Integer> numsArr , int ele)
//     {
//         int i = 0 , j = numsArr.size()-1;

//         while(i<=j)
//         {
//             int mid = i + (j-i)/2 ;

//             if(numsArr.get(mid) == ele)
//             {
//                 return mid+1;
//             }else if(numsArr.get(mid) < ele)
//             {
//                 i = mid+1;
//             }
//             else 
//             {
//                 j = mid-1;
//             }
//         }

//         return j+1;
//     }
//  }

// **********************BETTER TIME ******************************8 //

 class Solution {
    public int minOperations(int[] nums) {
        int n = nums.length;
        // usi array m modify krdo jb b elements equl h unhe hta k not equal wale
        int k = 1;
        Arrays.sort(nums);
        for(int i = 1;i<n;i++)
        {
            if(nums[i]!= nums[i-1])
            {
                nums[k++] = nums[i];
            }
        }

        // original array modify hogya hoga or k last index ko point kr rha hoga
        int ans = Integer.MAX_VALUE ;
         int j = 0;
        for(int i = 0;i<k;i++)
        {
           

            while(j<k && nums[j] < nums[i]+n)  // nums[i]+k is noting but upper range 
            {
                j++ ;
            }

            // ab j waha khda hoga jo ki upper bound hoga 

            ans = Math.min(ans, n-(j-i));

        }
        return ans;
    }
}
 
